<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kodesnutt</title>
  
  <subtitle>Async JavaScript</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://asyncjs.kodesnutt.io/"/>
  <updated>2021-03-17T13:51:02.295Z</updated>
  <id>https://asyncjs.kodesnutt.io/</id>
  
  <author>
    <name>Mikael Brevik</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Feilhåndtering av promises</title>
    <link href="https://asyncjs.kodesnutt.io/2017/12/14/05-Feilhandtering-av-promises/"/>
    <id>https://asyncjs.kodesnutt.io/2017/12/14/05-Feilhandtering-av-promises/</id>
    <published>2017-12-14T21:32:38.000Z</published>
    <updated>2021-03-17T13:51:02.295Z</updated>
    
    <content type="html"><![CDATA[<p>Feilhåndtering med promises kan være litt mystisk, og det er lett for å gi uventet feil i en lang promise-chain. I denne episoden ser vi på hvordan catching av feil i promises fungerer!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Feilhåndtering med promises kan være litt mystisk, og det er lett for å gi uventet feil i en lang promise-chain. I denne episoden ser vi 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Promises</title>
    <link href="https://asyncjs.kodesnutt.io/2017/12/14/04-Promises/"/>
    <id>https://asyncjs.kodesnutt.io/2017/12/14/04-Promises/</id>
    <published>2017-12-14T20:44:46.000Z</published>
    <updated>2021-03-17T13:51:02.295Z</updated>
    
    <content type="html"><![CDATA[<p>I denne episoden bygger vi videre på konseptene vi lærte i forrige episode i serien rundt thunks og futures. Promises er et konsept som er bygd inn i Node.js og nettlesere som er likt konseptet futures, men man har en større API-overflate og man kan lage nye promises basert på tidligere promises.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I denne episoden bygger vi videre på konseptene vi lærte i forrige episode i serien rundt thunks og futures. Promises er et konsept som e
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Thunks &amp; Futures</title>
    <link href="https://asyncjs.kodesnutt.io/2017/12/01/03-Thunks-Futures/"/>
    <id>https://asyncjs.kodesnutt.io/2017/12/01/03-Thunks-Futures/</id>
    <published>2017-12-01T08:01:17.000Z</published>
    <updated>2021-03-17T13:51:02.295Z</updated>
    
    <content type="html"><![CDATA[<p>I denne episoden skal vi se hvordan vi kan holde på en asynkron verdi uten å måtte ta stilling til det med en gang via en callback. Vi skal se på grunnleggende thunks og noe vi kaller futures.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I denne episoden skal vi se hvordan vi kan holde på en asynkron verdi uten å måtte ta stilling til det med en gang via en callback. Vi sk
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Event Loop</title>
    <link href="https://asyncjs.kodesnutt.io/2017/11/27/02-EventLoop/"/>
    <id>https://asyncjs.kodesnutt.io/2017/11/27/02-EventLoop/</id>
    <published>2017-11-27T12:47:13.000Z</published>
    <updated>2021-03-17T13:51:02.295Z</updated>
    
    <content type="html"><![CDATA[<p>Andre episode av serien hvor vi undersøker asynkron JavaScript. I denne episoden ser vi på hva en event loop er i JavaScript og hva det betyr at JavaScript er single threaded.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Andre episode av serien hvor vi undersøker asynkron JavaScript. I denne episoden ser vi på hva en event loop er i JavaScript og hva det b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Callbacks</title>
    <link href="https://asyncjs.kodesnutt.io/2017/11/27/01-Callbacks/"/>
    <id>https://asyncjs.kodesnutt.io/2017/11/27/01-Callbacks/</id>
    <published>2017-11-27T11:49:38.000Z</published>
    <updated>2021-03-17T13:51:02.295Z</updated>
    
    <content type="html"><![CDATA[<p>Vi starter den nye serien om asynkron JavaScript med å se på den mest grunnleggende byggeklossen til asynkronitet i JavaScript: Callbacket.</p><p>En funksjon som lar deg delegere bort ansvar til invokasjon til noen andre.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vi starter den nye serien om asynkron JavaScript med å se på den mest grunnleggende byggeklossen til asynkronitet i JavaScript: Callbacke
      
    
    </summary>
    
    
  </entry>
  
</feed>
